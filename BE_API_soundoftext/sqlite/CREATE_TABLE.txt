CREATE TABLE Languages (
    language_id INTEGER PRIMARY KEY AUTOINCREMENT,
    language_code TEXT NOT NULL UNIQUE,
    language_name TEXT NOT NULL
);


CREATE TABLE Words_en (
    WordID INTEGER PRIMARY KEY AUTOINCREMENT,
    LanguageID INTEGER NOT NULL,
    Word TEXT NOT NULL,
    AccessCount INTEGER DEFAULT 0,
    AudioPath TEXT
);


CREATE TABLE Words_ru (
    Word TEXT NOT NULL,
    AccessCount INTEGER DEFAULT 0,
    AudioPath TEXT
);


CREATE TABLE Translations (
    "af" INTEGER,
    "sq" INTEGER,
    "am" INTEGER,
    "ar" INTEGER,
    "hy" INTEGER,
    "az" INTEGER,
    "eu" INTEGER,
    "be" INTEGER,
    "bn" INTEGER,
    "bs" INTEGER,
    "bg" INTEGER,
    "ca" INTEGER,
    "ceb" INTEGER,
    "ny" INTEGER,
    "zh_cn" INTEGER,
    "zh_tw" INTEGER,
    "co" INTEGER,
    "hr" INTEGER,
    "cs" INTEGER,
    "da" INTEGER,
    "nl" INTEGER,
    "en" INTEGER,
    "eo" INTEGER,
    "et" INTEGER,
    "tl" INTEGER,
    "fi" INTEGER,
    "fr" INTEGER,
    "fy" INTEGER,
    "gl" INTEGER,
    "ka" INTEGER,
    "de" INTEGER,
    "el" INTEGER,
    "gu" INTEGER,
    "ht" INTEGER,
    "ha" INTEGER,
    "haw" INTEGER,
    "he" INTEGER,
    "hi" INTEGER,
    "hmn" INTEGER,
    "hu" INTEGER,
    "is" INTEGER,
    "ig" INTEGER,
    "id" INTEGER,
    "ga" INTEGER,
    "it" INTEGER,
    "ja" INTEGER,
    "jw" INTEGER,
    "kn" INTEGER,
    "kk" INTEGER,
    "km" INTEGER,
    "ko" INTEGER,
    "ku" INTEGER,
    "ky" INTEGER,
    "lo" INTEGER,
    "la" INTEGER,
    "lv" INTEGER,
    "lt" INTEGER,
    "lb" INTEGER,
    "mk" INTEGER,
    "mg" INTEGER,
    "ms" INTEGER,
    "ml" INTEGER,
    "mt" INTEGER,
    "mi" INTEGER,
    "mr" INTEGER,
    "mn" INTEGER,
    "my" INTEGER,
    "ne" INTEGER,
    "no" INTEGER,
    "or" INTEGER,
    "ps" INTEGER,
    "fa" INTEGER,
    "pl" INTEGER,
    "pt" INTEGER,
    "pa" INTEGER,
    "ro" INTEGER,
    "ru" INTEGER,
    "sm" INTEGER,
    "gd" INTEGER,
    "sr" INTEGER,
    "st" INTEGER,
    "sn" INTEGER,
    "sd" INTEGER,
    "si" INTEGER,
    "sk" INTEGER,
    "sl" INTEGER,
    "so" INTEGER,
    "es" INTEGER,
    "su" INTEGER,
    "sw" INTEGER,
    "sv" INTEGER,
    "tg" INTEGER,
    "ta" INTEGER,
    "te" INTEGER,
    "th" INTEGER,
    "tr" INTEGER,
    "uk" INTEGER,
    "ur" INTEGER,
    "ug" INTEGER,
    "uz" INTEGER,
    "vi" INTEGER,
    "cy" INTEGER,
    "xh" INTEGER,
    "yi" INTEGER,
    "yo" INTEGER,
    "zu" INTEGER
);


---------------------------------------------------------------------------

-- Добавление языков
INSERT INTO Languages (language_code, language_name) VALUES
('af', 'Afrikaans'),
('sq', 'Albanian'),
('am', 'Amharic'),
('ar', 'Arabic'),
('hy', 'Armenian'),
('az', 'Azerbaijani'),
('eu', 'Basque'),
('be', 'Belarusian'),
('bn', 'Bengali'),
('bs', 'Bosnian'),
('bg', 'Bulgarian'),
('ca', 'Catalan'),
('ceb', 'Cebuano'),
('ny', 'Chichewa'),
('zh-cn', 'Chinese (Simplified)'),
('zh-tw', 'Chinese (Traditional)'),
('co', 'Corsican'),
('hr', 'Croatian'),
('cs', 'Czech'),
('da', 'Danish'),
('nl', 'Dutch'),
('en', 'English'),
('eo', 'Esperanto'),
('et', 'Estonian'),
('tl', 'Filipino'),
('fi', 'Finnish'),
('fr', 'French'),
('fy', 'Frisian'),
('gl', 'Galician'),
('ka', 'Georgian'),
('de', 'German'),
('el', 'Greek'),
('gu', 'Gujarati'),
('ht', 'Haitian Creole'),
('ha', 'Hausa'),
('haw', 'Hawaiian'),
('he', 'Hebrew'),
('hi', 'Hindi'),
('hmn', 'Hmong'),
('hu', 'Hungarian'),
('is', 'Icelandic'),
('ig', 'Igbo'),
('id', 'Indonesian'),
('ga', 'Irish'),
('it', 'Italian'),
('ja', 'Japanese'),
('jw', 'Javanese'),
('kn', 'Kannada'),
('kk', 'Kazakh'),
('km', 'Khmer'),
('ko', 'Korean'),
('ku', 'Kurdish (Kurmanji)'),
('ky', 'Kyrgyz'),
('lo', 'Lao'),
('la', 'Latin'),
('lv', 'Latvian'),
('lt', 'Lithuanian'),
('lb', 'Luxembourgish'),
('mk', 'Macedonian'),
('mg', 'Malagasy'),
('ms', 'Malay'),
('ml', 'Malayalam'),
('mt', 'Maltese'),
('mi', 'Maori'),
('mr', 'Marathi'),
('mn', 'Mongolian'),
('my', 'Myanmar (Burmese)'),
('ne', 'Nepali'),
('no', 'Norwegian'),
('or', 'Odia'),
('ps', 'Pashto'),
('fa', 'Persian'),
('pl', 'Polish'),
('pt', 'Portuguese'),
('pa', 'Punjabi'),
('ro', 'Romanian'),
('ru', 'Russian'),
('sm', 'Samoan'),
('gd', 'Scots Gaelic'),
('sr', 'Serbian'),
('st', 'Sesotho'),
('sn', 'Shona'),
('sd', 'Sindhi'),
('si', 'Sinhala'),
('sk', 'Slovak'),
('sl', 'Slovenian'),
('so', 'Somali'),
('es', 'Spanish'),
('su', 'Sundanese'),
('sw', 'Swahili'),
('sv', 'Swedish'),
('tg', 'Tajik'),
('ta', 'Tamil'),
('te', 'Telugu'),
('th', 'Thai'),
('tr', 'Turkish'),
('uk', 'Ukrainian'),
('ur', 'Urdu'),
('ug', 'Uyghur'),
('uz', 'Uzbek'),
('vi', 'Vietnamese'),
('cy', 'Welsh'),
('xh', 'Xhosa'),
('yi', 'Yiddish'),
('yo', 'Yoruba'),
('zu', 'Zulu');

======================================================================

add words



import sqlite3
from sqlite3 import Error

def create_connection(db_file):
    """Create a database connection to a SQLite database."""
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        print(sqlite3.version)
    except Error as e:
        print(e)
    return conn

def create_table(conn, create_table_sql):
    """Create a table from the create_table_sql statement."""
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)

def insert_word(conn, word):
    """Insert a new word into the Words_en table."""
    sql = ''' INSERT INTO Words_en(Word, AccessCount, AudioPath)
              VALUES(?,0,NULL) '''
    cur = conn.cursor()
    cur.execute(sql, (word,))
    return cur.lastrowid

def main():
    database = r'C:\Users\hc158\GitHub\Python\BE_API_soundoftext\sqlite\translate.db'

    # SQL for creating the Words_en table without WordID
    sql_create_words_en_table = """CREATE TABLE IF NOT EXISTS Words_en (
                                    Word TEXT NOT NULL,
                                    AccessCount INTEGER DEFAULT 0,
                                    AudioPath TEXT
                                );"""

    # Create a database connection
    conn = create_connection(database)

    # Create the Words_en table
    if conn is not None:
        create_table(conn, sql_create_words_en_table)

        # Read words from file and insert into the Words_en table
        words_file_path = r'C:\Users\hc158\GitHub\Python\BE_API_soundoftext\sqlite\words_en.txt'
        with open(words_file_path, 'r') as words_file:
            for word in words_file:
                word = word.strip()  # Remove whitespace
                if word:  # Check if the word is not empty
                    insert_word(conn, word)
        conn.commit()  # Commit the changes
        print("Words have been added to the database.")
    else:
        print("Error! cannot create the database connection.")

    # Close the connection to the database
    if conn:
        conn.close()

if __name__ == '__main__':
    main()





======================================================================
add indec to table

import sqlite3

# Подключение к базе данных
conn = sqlite3.connect(r'C:\Users\hc158\GitHub\Python\BE_API_soundoftext\sqlite\translate.db')
cursor = conn.cursor()

# Создание запроса для вставки данных
insert_query = "INSERT INTO Translations (en) VALUES (?)"

# Генерация и вставка значений от 1 до 466550
for i in range(1, 466551):
    cursor.execute(insert_query, (i,))

# Сохранение изменений и закрытие соединения
conn.commit()
conn.close()

print("Данные успешно добавлены в колонку 'en'.")

======================================================================

import sqlite3

# Встановлення шляху до вашої бази даних
db_path = "C:/Users/hc158/GitHub/Python/BE_API_soundoftext/sqlite/translate.db"

# Підключення до бази даних
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Створення SQL запиту для вставки пустих записів
insert_query = """
INSERT INTO Words_ru (Word, AccessCount, AudioPath) VALUES (?, ?, ?);
"""

# Виконання запиту в циклі
for _ in range(466550):
    # Вставка запису з пустими значеннями для Word та AudioPath і 0 для AccessCount
    cursor.execute(insert_query, ("", 0, ""))

# Збереження змін і закриття підключення
conn.commit()
conn.close()

print("Записи успішно додані.")


